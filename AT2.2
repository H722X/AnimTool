 //Edit by H7.
//if the optionVar does'nt exist, create it.
if( !`optionVar -exists "timeSliderLength"` )
{
    optionVar -intValue "timeSliderLength" 600;
}

global proc getOffsetAmount (string $textFieldName)
{
    string $value = (`textField -q -text $textFieldName`);
    int $intVal = (int)$value;
    keyframe -edit -relative -timeChange ($intVal);
    
}

global proc getNegOffsetAmount (string $textFieldName)
{
    string $value = ("-" + `textField -q -text $textFieldName`);
    int $intVal = (int)$value;
    keyframe -edit -relative -timeChange ($intVal);
    
}

global proc showNurbsCurvesTool()
{  
    global string $button_show[];
    //save Currently active panel in a String
    string $currentPanel = `getPanel -withFocus`;
    
    //Toggles the visibility
    if (`modelEditor -query -nurbsCurves $currentPanel` == true) 
    {
        modelEditor -e -nurbsCurves false `getPanel -withFocus`;
        button -edit -bgc 0.3 0.3 0.3 $button_show[0];
    }
    else
    {
        modelEditor -e -nurbsCurves true `getPanel -withFocus`;
        button -edit -bgc 0.407843 0.631373 0.188235 $button_show[0];
    }
}
/////////////////////////////////////////////////////////////////////////////

global proc showPolygonsTool()
{
    global string $button_show[];
    //save Currently active panel in a String
    string $currentPanel = `getPanel -withFocus`;
    
    //Toggles the visibility
    if (`modelEditor -query -pm $currentPanel` == true) 
    {
        modelEditor -e -pm false `getPanel -withFocus`;
         button -edit -bgc 0.3 0.3 0.3 $button_show[1];
    }
    else
    {
        modelEditor -e -pm true `getPanel -withFocus`;
        button -edit -bgc 0.407843 0.631373 0.188235 $button_show[1];
    }
}
//////////////////////////////////////////////////////////////////////////////

global proc showJointTool()
{
    global string $button_show[];
    //save Currently active panel in a String
    string $currentPanel = `getPanel -withFocus`;
    
    //Toggles the visibility
    if (`modelEditor -query -j $currentPanel` == true) 
    {
        modelEditor -e -j false `getPanel -withFocus`;
         button -edit -bgc 0.3 0.3 0.3 $button_show[2];
    }
    else
    {
        modelEditor -e -j true `getPanel -withFocus`;
        button -edit -bgc 0.407843 0.631373 0.188235 $button_show[2];
    }
}

global proc motionTrailTool()
{
    // MOTION TRAILS TOOL
    // By Maxim Ouellet
    
    
    $currentSelection = `ls -sl -l`;
    
    $motionTrailList = `ls "*motionTrail*"`;
    
    if ( size($motionTrailList) != 0 ){
        select "*motionTrail*";
        delete;
    }
    else { 
        select $currentSelection;
        doMotionTrail 2 { "snapshot  -motionTrail 1  -increment 1 -startTime `playbackOptions -query -min` -endTime `playbackOptions -query -max`", "1","0","0","1","1","1"};
    };
}


//Stagger Animation by Brian Horgan
//http://www.graphite9.com/
global proc bh_staggerProc (string $textFieldName)
{
	
	string $sel[] = `ls -sl`;
    int $selCount = size($sel);
    if(`checkBox -q -v StaggerLoop` == 1)
        {
            setInfinity -pri cycle;
            setInfinity -poi cycle;
        }
    select -cl;
    int $timeStart = `playbackOptions -q -min`; 
    int $timeEnd = `playbackOptions -q -max`;
    
    for ($rc = 0; $rc < $selCount; $rc++) 
    {
	
	    select -r $sel[$rc];
        string $value = (`textField -q -text $textFieldName`);
        int $intVal = (int)$value;
        int $staggerVal = ($intVal*$rc);
    
        keyframe -e -iub true -r -o over -tc ($staggerVal)  ; // nudge forward
        
        if(`checkBox -q -v StaggerLoop` == 1)
        {        
            bakeResults -simulation true -t ($timeStart+":"+$timeEnd) -smart 1;
            selectKey -t (":"+($timeStart-1)) $sel[$rc];
            selectKey -add -t (($timeEnd+1)+":") $sel[$rc];
            cutKey -animation keys -clear;
            //selectKey -clear;
        }
	}
	select -r $sel;
	if(`checkBox -q -v StaggerLoop` == 1)
        {
            setInfinity -pri constant;
            setInfinity -poi constant;
        }
} //Stagger by Brian Horgan,modify by H7

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

global proc graphEditorViz ()
{
    int $TSLength = `optionVar -q "timeSliderLength"`;
    if ( `window -exists graphEditorPlusWindow` )
    {
       deleteUI graphEditorPlusWindow;
    }
    
    else
    {            
        window -title "Graph Editor Plus by Maxim Ouellet" "graphEditorPlusWindow";
          string $form = `formLayout`;
        
        // Add a paneLayout to hold the Graph Editor
        string $pane = `paneLayout -configuration "single"`;

          setParent ..;
          
            // Add additional controls to the window
            string $row = `rowLayout -numberOfColumns 17`;
            global string $toggleButton[];

              $toggleButton[0] = `button -command "curveSelection(\"translateX\", 0)" -backgroundColor 0.6 0 0 -label "tX"`;   
              $toggleButton[1] = `button -command "curveSelection(\"translateY\", 1)" -backgroundColor 0 0.6 0 -label "tY"`;
              $toggleButton[2] = `button -command "curveSelection(\"translateZ\", 2)" -backgroundColor 0 0.254902 0.6 -label "tZ"`;
              $toggleButton[3] = `button -command "curveSelection(\"rotateX\", 3)" -backgroundColor 0.6 0 0 -label "rX"`;
              $toggleButton[4] = `button -command "curveSelection(\"rotateY\", 4)" -backgroundColor 0 0.6 0 -label "rY"`;          
              $toggleButton[5] = `button -command "curveSelection(\"rotateZ\", 5)" -backgroundColor 0 0.254902 0.6 -label "rZ"`;
              $toggleButton[6] = `button -command "curveSelection(\"scaleX\", 6)" -backgroundColor 0.6 0 0 -label "sX"`;
              $toggleButton[7] = `button -command "curveSelection(\"scaleY\", 7)" -backgroundColor 0 0.6 0 -label "sY"`; 
              $toggleButton[8] = `button -command "curveSelection(\"scaleZ\", 8)" -backgroundColor 0 0.254902 0.6 -label "sZ"`;                   
              button -command "clearFilters" -backgroundColor 1 1 1 -label "CLEAR";
              text -label " - ------------ - " -vis false -w 30;
              string $offsetAmountField = `textField -text "1" -w 30`;
              string $object = `button -command ("getOffsetAmount(\"" + $offsetAmountField + "\");") -backgroundColor 0.188235 0.403922 0.631373 -label "Move" -w 68`;
              text -label " - ------------ - " -vis false -w 30;
              symbolButton -image "timerew.xpm"  -c "playButtonStart";
              symbolButton -image "timeplay.xpm" -c "playButtonForward";
              timePort -bgc 0.4 0.4 0.4 -w 750 -h 28;
              setParent ..;
        
            setParent ..;
        
          formLayout -e
            -af   $row          "left"    2
            -af   $row          "right"   2
            -af   $row          "bottom"  2
            -af   $pane         "top"     2
            -af   $pane         "left"    2
            -af   $pane         "right"   2
            -ac   $pane         "bottom"  4   $row
              $form;

    // Find the Grapheditor panel
    string $GraphEditors[] = `getPanel -scriptType graphEditor`;
    
    if ( size( $GraphEditors ) )
    {
      // Unparent the scriptedPanel from where it is currently docked
      scriptedPanel -e -unParent $GraphEditors[0];
      // Fill the 'hole' left in the UI from removing the GraphEditor
      fillEmptyPanes;
    }
    else
    // A GraphEditor panel was not found -- create an unParented panel
    {
      global int $gUseMenusInPanels;
      scriptedPanel -mbv $gUseMenusInPanels -type graphEditor
                    -unParent -l "Graph Editor" graphEditor;
    }
    
    // Now dock the Render View into our own layout.
    scriptedPanel -e -parent $pane $GraphEditors[0];
        
        setFocus $pane;
        
        showWindow;
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

global proc timeSliderSetLengthProc (string $wantedLength)
{
    string $value = (`textField -q -text $wantedLength`);
    int $lengthInt = (int)$value;
    optionVar -iv "timeSliderLength" $lengthInt;
}
//////////////////////////////////////////////////////////////


global string $button_show[];
//START MainWindow creation
global proc animationToolUI()
{
    global string $button_show[];
if ( `window -exists mainWindow` )
{
   deleteUI mainWindow;
}


string $window = `window  -title "AnimTool_2.2" 
                                 -tlb 1
                                 -s 1
                                 -menuBar true
                                 "mainWindow"`;
paneLayout -configuration "horizontal2";
string $form = `formLayout -numberOfDivisions 100`;
string $object;

// Creating Element frameOffset
string $offsetAmountField = `textField -text "1" -w 34 -h 34`;
formLayout -edit -attachForm $offsetAmountField "top" 27 -attachForm $offsetAmountField "left" 54 $form;
//=========================================
// Creating Element toRight
$object = `button -command ("getOffsetAmount(\"" + $offsetAmountField + "\");") -backgroundColor 0.188235 0.403922 0.631373 -label "-->" -w 34 -h 34`;
formLayout -edit -attachForm $object "top" 27 -attachForm $object "left" 98 $form;
//=========================================
// Creating Element Text01
$object = `text -label "offset keys by X frames." -w 122 -h 20`;
formLayout -edit -attachForm $object "top" 7 -attachForm $object "left" 10 $form;
//=========================================
// Creating Element toLeft
$object = `button -command ("getNegOffsetAmount(\"" + $offsetAmountField + "\");") -backgroundColor 0.6 0.14902 0 -label "<--" -w 34 -h 34`;
formLayout -edit -attachForm $object "top" 27 -attachForm $object "left" 10 $form;
//=========================================
// Creating Element nurbViz
$button_show[0] = `button -command "showNurbsCurvesTool()" -backgroundColor 0.407843 0.631373 0.188235 -label "Curves" -w 39 -h 34`;
formLayout -edit -attachForm $button_show[0] "top" 117 -attachForm $button_show[0] "left" 10 $form;
//=========================================
$button_show[1] = `button -command "showPolygonsTool()" -backgroundColor 0.407843 0.631373 0.188235 -label "Mesh" -w 39 -h 34`;
formLayout -edit -attachForm $button_show[1] "top" 117 -attachForm $button_show[1] "left" 52 $form;
//=========================================
$button_show[2] = `button -command "showJointTool()" -backgroundColor 0.407843 0.631373 0.188235 -label "Joint" -w 39 -h 34`;
formLayout -edit -attachForm $button_show[2] "top" 117 -attachForm $button_show[2] "left" 93 $form;
//=========================================
// Creating Element motionTrailViz
$object = `button -command "motionTrailTool()" -backgroundColor 0.188235 0.631373 0.364706 -label "Motion Trail Tool" -w 122 -h 34`;
formLayout -edit -attachForm $object "top" 160 -attachForm $object "left" 10 $form;
//=========================================
$object = `checkBox -v 0 -label "L" -sbm "Loop" "StaggerLoop"`;
formLayout -edit -attachForm $object "top" 72 -attachForm $object "left" 10 $form;
// Creating Element keyStag
$object = `button -command ("bh_staggerProc(\"" + $offsetAmountField + "\");") -backgroundColor 0.541176 0.282353 0.2 -label "Stagger Keys" -w 85 -h 22`;
formLayout -edit -attachForm $object "top" 68 -attachForm $object "left" 45 $form;
//=========================================
// Creating Element Separator 01
$object = `separator -w 122 -h 11`;
formLayout -edit -attachForm $object "top" 98 -attachForm $object "left" 7 $form;
//=========================================
// Creating Element GraphViz
$object = `button -command "graphEditorViz ()" -backgroundColor 0.788235 0.631373 0.364706 -label "Graph Editor +" -w 122 -h 34`;
formLayout -edit -attachForm $object "top" 203 -attachForm $object "left" 10 $form;
//=========================================
  
$object = `separator -w 122 -h 8`;
formLayout -edit -attachForm $object "top" 239 -attachForm $object "left" 7 $form;

//AutoBind===================================
setParent ..;
string $BindMenuBarLayout = `menuBarLayout`;
string $form2 = `formLayout -numberOfDivisions 100`;

menu -label "AutoBindJoint" AutoBind;
      menuItem -label "AutoBind"  -checkBox on AutoBindCheckBox;
      menuItem -label "Auto end+" -checkBox on EndCheckBox;
      menuItem -label "AutoJointSize" -checkBox on JointSizeCheckBox;
      //menuItem -label "AutoSort" -checkBox off SortCheckBox;


//$object = `checkBox -ann "Auto add end controls when bind" -label "" -v 1 -h 18  EndCheckBox`;
//formLayout -edit -attachForm $object "top" 303 -attachForm $object "left" 10 $form;

//$object = `checkBox -ann "Auto Bind Joint" -label "AutoBindJoint" -v 1 -h 18  AutoBindCheckBox`;
//formLayout -edit -attachForm $object "top" 245 -attachForm $object "left" 10 $form;

$object = `button  -p $form2 -command "createEnd(1)" -backgroundColor 0.3 0.3 0.3 -label "End+" -w 39 -h 34`;
                    popupMenu;
                                menuItem  -label "Clear" -c "CleanUpEnd";
formLayout -edit -attachForm $object "top" 0 -attachForm $object "left" 93 $form2;

//$object = `button -p $form2 -command "CleanUpEnd" -backgroundColor 0.3 0.3 0.3 -label "Clear" -w 39 -h 34`;
//formLayout -edit -attachForm $object "top" 35 -attachForm $object "left" 52 $form2;

$object = `button -p $form2 -command "bindControlsAll" -backgroundColor 0.3 0.3 0.3 -label "Bind" -w 39 -h 34`;
formLayout -edit -attachForm $object "top" 0 -attachForm $object "left" 10 $form2;

$object = `button -p $form2 -command "clearBind" -backgroundColor 0.3 0.3 0.3 -label "Bake" -w 39 -h 34`;
formLayout -edit -attachForm $object "top" 0 -attachForm $object "left" 52 $form2;

$object = `button -p $form2 -command "selectPlus" -backgroundColor 0.3 0.3 0.3 -label "sel+" -w 39 -h 34`;
                    popupMenu;
                                menuItem  -label "Ctrl->Joint" -c "sel_COJ"; 
                                menuItem  -label "Joint->Ctrl" -c "sel_JOC";
                                menuItem  -label "straight" -c "straight";
formLayout -edit -attachForm $object "top" 35 -attachForm $object "left" 52 $form2;

$object = `button -p $form2 -command "sel_P" -backgroundColor 0.6 0.14902 0 -label "↑↑" -w 39 -h 34`;
formLayout -edit -attachForm $object "top" 35 -attachForm $object "left" 10 $form2;

$object = `button -p $form2 -command "sel_C(0)" -backgroundColor 0.188235 0.403922 0.631373 -label "↓↓" -w 39 -h 34`;
formLayout -edit -attachForm $object "top" 35 -attachForm $object "left" 93 $form2;

//=========================================

setParent..;
showWindow( $window );
window -edit -widthHeight 142.0 350.0 "mainWindow";
}//END MainWindow Creation

//////////////////////////////////////////排序starting...................
global proc chEnd()
{
    string $sel[] = `ls -sl`;
    select -hi $sel[0];
    string $ch[] = `ls -sl`;
    string $ch0;
    int $c=0;
    select -r $sel;
    if(`size $sel` > 1)
    {
        for($ch0 in $ch)
        {
            if($ch0 == $sel[1])
            {
                select -d $sel[0];
                $c = 1;
                break;
            }
        }
        if($c == 0)
        {
            select -d $sel[1];
        }
        chEnd;
    }
}
///////////////////////
global proc Sortt()
{
    string $sel[] = `ls -sl`;
    int $c;
    string $sor[];
    string $del[];
    for($c=0;$c<`size $sel`;$c++)
    {
        chEnd;
        string $s[] = `ls -sl`;
        $sor[(`size $sel`-$c-1)] = $s[0];
        $del[$c] = $s[0];
        select $sel;
        select -d $del;
    }
    select $sor;
}
//////////////////////////////////////////排序Ending...................

global proc selectHi()
{
    select -hi;
    string $sel[]=`ls -sl`;
    string $i;
    string $nurbsCurves[];
    int $count;
    string $parentCurve[];
    for($i in $sel)
    {
        string $i_c[] = `listRelatives -c -f $i`;
        string $i_c0;
        for($i_c0 in $i_c)
        {
            if (`nodeType $i_c0` == "nurbsCurve")
            {
                $parentCurve = `listRelatives -p -f $i_c0`;
                $nurbsCurves[$count] = $parentCurve[0];
                $count++;
                break;
            }
        }
    }
    select $nurbsCurves;
    //if(`menuItem -q -checkBox SortCheckBox` == 1)
    //{
    //    Sortt;
    //}
}
//////////////////////////////////////////////////////////////////////

global proc straight()
{
    
    string $i[] = `ls -sl`;
    string $i0;
    for ($i0 in $i)
    {
        if (`nodeType $i0` != "joint")
        {
            select $i0;
            selectHi();
            select -d $i0;
            string $Hi[] = `ls -sl`;
            string $Hi0;
            for ($Hi0 in $Hi)
            {
                string $con[] = `orientConstraint -offset 0 0 0 -weight 1 $i0 $Hi0`;
                setKeyframe $Hi0;
                delete $con;
            }
            select $i;
         }
         else
         {
             select $i0;
             select -hi;
             select -d $i0;
             string $Hi_j[] = `ls -sl`;
             string $Hi_j0;
             for ($Hi_j0 in $Hi_j)
             {
                 ResetTransformations $Hi_j0;
             }
             select $i;
         }
    }
}
//////////////////////////////////////////////////////////////////////////////

global proc selectPlus()
{
    string $sel[]=`ls -sl`;
    string $sel_joint[];
    string $joint[];
    int $count;
    
    if(`size $sel` > 0 )
    {
    if(`nodeType $sel[0]` == "joint")
    {
        select -hi;
        $sel_joint = `ls -sl`;
        for($i in $sel_joint)
       {
            if (`nodeType $i` == "joint")
            {
                $joint[$count] = $i;
                $count++;
            }
       }
       select $joint;
    }
    else
    {      
         selectHi;
    }
    }
}

/////////////////////////////////////////////////////////////////////

//////////选择父级starting......................................
global proc sel_P()
{
    string $sel[] = `ls -sl`;
    string $i;
    int $c;
    string $p[];
    for($i in $sel)
    {
       select $i;
       selectP;
       string $temp[] = `ls -sl`;
       if(`size $temp` > 0)
       {
           $p[$c] = $temp[0];
           $c++;
       }
    }
    select $p;
}
//////////选择父级ending......................................

//////////////////////////选择子集starting...........................................///////////////////////
global proc curv()
{
    string $s[] = `ls -sl`;
    string $t0[] = `listRelatives -c -f $s`;
    string $i;
    string $p[];
    int $b = 0;
    for ($i in $t0)
    {
        if(`nodeType $i` == "nurbsCurve")
        {
            $p[0] = $s[0];
            select $p[0];
            $b = 1;
            break;
        }
    }
    if ($b == 0)
    {
        select -d;
    }
}
//////////////////////
global proc selectC()
 {
     string $s[] = `ls -sl`;
     string $t0[] = `listRelatives -c -f $s[0]`;
     if(`size $t0` > 0)
     {
         if(`size $t0` > 1)
         {     
             select $s[0];
             curv;
             string $temp[] = `ls -sl`;
             if(`size $temp` > 0)
             {
                 select $s[0];//多子级检测自己是曲线
             }
             else
             {
                 string $t00;
                 string $cur[];
                 string $others[];
                 int $c;
                 int $n;
                 for ($t00 in $t0)
                 {
                     select $t00;
                     curv;
                     string $temp1[] = `ls -sl`;
                     if(`size $temp1` > 0)
                     {
                         $cur[$c] = $temp1[0];
                         $c++;
                     }
                     else
                     {
                         $others[$n] = $t00;
                         $n++;
                     }
                 }
                 if(`size $cur` > 0)
                 {
                     select $cur;
                     if(`size $others` > 0)
                     {
                         select -add $others;
                     }
                     sel_C(1);//多子级检测子级是曲线

                 }
                 else
                 {
                     select $t0;
                     sel_C(0);//多子级重判断
                 }
             }
         }
         else
         {
             if(`nodeType $t0[0]` != "nurbsCurve")
             {
                 select $t0[0];
                 curv;
                 string $s2[] = `ls -sl`;
                 if(`size $s2` == 0)
                 {
                     select $t0[0];
                     selectC;
                 }
                 else
                 {
                     select $s2;
                 }
             }
             else
             {
                 select $s[0];
             }
         }
     }
     else
     {
         select -d;
     }
}
/////////////////////////

////////////////////////
global proc sel_C(int $b)
 {
    string $ch1[];
    string  $sel_c_2[];
    string $s[] = `ls -sl`;
    string $s0;
    int $c1;
   // string $ch1[];
    string $ch[];
    int $c;
    for($s0 in $s)
    {
        select $s0;  curv;  string $curv_sel[] = `ls -sl`;
        if(`size $curv_sel` > 0 && $b == 1)
        {
                $ch[$c] = $s0;
                $c++;
        }//多子级曲线输入判断
        else
        {
            string $t0[] = `listRelatives -c -f $s0`;
            string $i;
            //int $c;
             for($i in $t0)
             {   
                     if(`nodeType $i` != "nurbsCurve")
                     {
                         select $i;
                         selectC;
                         string $temp[] = `ls -sl`;
                         if(`size $temp` > 0)
                         {   
                             if (`size $temp` > 1)
                             {
                                 string $temp_1;
                                 for($temp_1 in $temp)
                                 {
                                     $ch[$c] = $temp_1;
                                     $c++;
                                 }
                             }
                             else
                             {
                                 $ch[$c] = $temp[0];
                                 $c++;
                             }
                         }
                     }
             }
         }
          string $ch0;
          for($ch0 in $ch)
          {
              if(`objExists $ch0`)
              {
                  $ch1[$c1] = $ch0;
                  $c1++;
              }
          }
          //select $ch1;
    }
    select $ch1;
}
//////////////////////////选择子集Ending...........................................///////////////////////

global proc sel_COJ()
{
    string $sel[] = `ls -sl`;
    string $i;
    string $Joint_sel[];
    int $c;
    for($i in $sel)
    {
            if(`objExists ($i+"_kSpringProxySuffix")`)
            {
                $Joint_sel[$c] = ($i+"_kSpringProxySuffix");
                $c++;
            }
    }
    select $Joint_sel;
}
/////////////////////////////////////////////////////////////////////

global proc sel_JOC()
{
    string $sel[] = `ls -sl`;
    string $i;
    string $Ctrl_sel[];
    int $c;
    for($i in $sel)
    {
        if(`nodeType $i` == "joint")
        {
            clear_houzhui($i);
            string $t[] = `ls -sl`;
            if(`objExists $t[0]`)
            {
                $Ctrl_sel[$c] = $t[0];
                $c++;
            }
        }
    }
    select $Ctrl_sel;
}
/////////////////////////////////////////////////////////////////////////////

 //复制末端 
global proc dupEnd()
{ 
     string $nurbsCurves[] = `ls -sl`;
     int $a = `size $nurbsCurves`;
     if ($a == 1)
         {
             warning "请 不 要 选 择 末 端 !";
         }
     else 
        {
        string $copy[] = `duplicate -n curves_moduan -rc $nurbsCurves[$a-1]`;
        string $del[] = `listRelatives -c -f $copy[0]`;
        string $d2;
        for ($d2 in $del)
            {
                if(`nodeType $d2` != "nurbsCurve")
                {
                    select $d2;
                    doDelete;
                }
            }//删除所有子级
        parent -w $copy[0];
        parent $copy[0] $nurbsCurves[$a-1];
        
 //计算距离   
        string $loc1[] = `spaceLocator`;
        string $con1[] = `parentConstraint -weight 1 $nurbsCurves[$a-2] $loc1[0]`;
        delete $con1;
            
        string $loc2[] = `spaceLocator`;
        string $con2[] = `parentConstraint -weight 1 $nurbsCurves[$a-1] $loc2[0]`;
        delete $con2;
            
        parent $loc2[0] $loc1[0];
            
        vector $L = `getAttr ($loc2[0]+".translate")`;
        delete $loc1[0];
//计算结束              
        select -r $copy[0];
        if(abs($L.x) > abs($L.y) && abs($L.x) > abs($L.z))  {move -r -os -x ($L.x);}
        if(abs($L.y) > abs($L.x) && abs($L.y) > abs($L.z))  {move -r -os -y ($L.y);}
        if(abs($L.z) > abs($L.x) && abs($L.z) > abs($L.y))  {move -r -os -z ($L.z);}
    }
}

//清理末端
global proc CleanUpEnd()
{
    if(`objExists "curves_moduan*"`) 			{delete "curves_moduan*";}
}
//////////////////////////////////////////////////////////////////////////

global proc mul_Hi_solve_end(string $solve,string $Same[],int $warn)
{
             select $solve;
             selectHi;
             string $X_A[] = `ls -sl`;
             select $Same;  selectHi;
             string $X_d[] = `ls -sl`;
             select $X_A;  select -d $X_d;
             string $X_link[] = `ls -sl`;//主链
             
              int $a = `size $X_link`;
              string $objectName = $X_link[$a-1];
              string $end_main[];
              if (`match "curves_moduan" $objectName` != "curves_moduan")
              {
                  dupEnd;
                  $end_main = `ls -sl`;
              }
           
           string $Same_ch;
           int $c;
           int $c1;
           string $end[];
           string $objectName2[];
           for ($Same_ch in $Same)
           {
                select $Same_ch;
                selectHi;
                string $Same_ch_link[] = `ls -sl`;
                int $b = `size $Same_ch_link`;
                $objectName2[$c1] = $Same_ch_link[$b-1];
                if (`match "curves_moduan" $objectName2[$c1]` != "curves_moduan")
                {
                    dupEnd;
                    string $temp_cache[] = `ls -sl`;
                    $end[$c] = $temp_cache[0];
                    $c++;
                }
                $c1++;
           }
           if((`size $end` == 0) && (`size $end_main` == 0))
           {
                if($warn == 1)
                {
                   warning ("已 经 存 在 末 端"+"\n");  
                }
                select -r $objectName2;
                select -add $objectName;
           }
           else
           {
               select -r $end;
               select -add $end_main;
           }
}
//////////////////////////////////////////////////////////////////////////////////////

global proc createEnd(int $warn)
{
//多选
string $numChoose[] = `ls -sl`;
int $num = `size $numChoose`;
//最终执行
        int $choose;
        string $selEnd[];
        string $selEndAll[];
        int $count = 0;
        string $selAll01[];
        string $selAll02[];
        for ($choose = 0;$choose <= ($num-1);$choose++)
        {
              mul_Hi_judge($numChoose[$choose]);
              string $ch_same_F[] = `ls -sl`;
              if(`size $ch_same_F` > 0)
              {
                  string $t;
                  for($t in $ch_same_F)
                  {
                      mul_Hi_judge($t);
                      string $ch_same_F2[] = `ls -sl`;
                       if(`size $ch_same_F2` > 0)
                      {
                          mul_Hi_solve_end($t,$ch_same_F2,$warn);
                          $selAll01 = `ls -sl`; 
                      }
                  }
                  mul_Hi_solve_end($numChoose[$choose],$ch_same_F,$warn);
                  $selAll02 = `ls -sl`;
                  select -r $selAll01;
                  select -add $selAll02;
              }
              else
              {
                  select $numChoose[$choose];
                  selectHi;
                  string $sel[] = `ls -sl`;
                  int $a = `size $sel`;
                  string $objectName = $sel[$a-1];
                  if (`match "curves_moduan" $objectName` == "curves_moduan")
                  {
                      if($warn == 1)
                      {
                         warning ("已 经 存 在 末 端"+"\n");  
                      }
                      select $sel[$a-1];
                  }
                  else
                  {
                      dupEnd;
                      string $selEnd[] = `ls -sl`;
                      $selEndAll[$count] = $selEnd[0];
                      $count++;
                      select $selEndAll;
                  }
              }
         }

    //select $numChoose;
    //selectHi;
}
//END//////////////////////////////////////////////////////////////////

//Auto Blind Joint/////////////////////////////////////////////////////
global proc qParent(string $i)
{
    string $hi[] = `listRelatives -p -f $i`;
    string $a = $hi[0];
    select $a;

}
/////////////////////////////////////////////////////////////////////////////////


global proc qDistance(string $start, string $end)
{
    vector $A = `xform -q -ws -rp $start`;
    vector $B = `xform -q -ws -rp $end`;
    float $L = mag($A - $B);

}
///////////////////////////////////////////////////////////////////////////////////
global proc clear_houzhui(string $sel)
{
    string $cache[];
    int $n = `tokenize $sel "_" $cache`;
    int $c;
    string $name1;
    for($c=0;$c < ($n-1);$c++)
    {
        if($c == 0)
        {
            $name1 = $cache[0];
        }
        else
        {
            $name1 = $name1 + "_" + $cache[$c];
        }
    }
    //print $name1;
    //return;
    select $name1;
}
////////////////////////////////////////////////////////////////////////////////////


global proc M(string $m)//选择_后缀匹配的对象
{
    string $i;
    string $A[] = `ls -typ "joint"`;
    int $c;
    string $B[];
    for($i in $A)
    {

       if( `match $m $i` == $m)
        { 
         $B[$c] = $i;
         $c++;
        }
    }
    select $B;
}
////////////////////////////////////////////////////////////////////////////////////


global proc bindControls(string $A[],int $warn)
{ 
    select $A;
    //selectHi;
    string $ctrls_chains[] = `ls -sl`;
    string $i0;
    string $cunzai;
    int $cunzai_index;
    for($i0 in $ctrls_chains)
    {
        if($cunzai_index == 0)
        {
            $cunzai = `objExists ($i0+"_kSpringProxySuffix")`;
        }
       else
       {   
           $cunzai = $cunzai+`objExists ($i0+"_kSpringProxySuffix")`;
       }
       $cunzai_index++;
    }
    if(`match "1" $cunzai` == 1)
    {
        if($warn == 1)
        {
            warning ("已 经 存 在 代 理 骨 骼！"+"\n");  
        }
        select -d;
    }
    else
    {
        select -d;
        string $i;
        int $c = 0;
        string $proxyJoint[];
        float $L;
        if(`size $ctrls_chains` > 1 )
        { 
            vector $L0 = `xform -q -ws -rp $ctrls_chains[0]`;
            vector $L1 = `xform -q -ws -rp $ctrls_chains[1]`;
            $L = mag($L0 - $L1);
            if(`menuItem -q -checkBox JointSizeCheckBox` == 1)
            {
                if ($L > 20)
                {
                    $L = 20;
                }
            }
            else
            {
                $L = $L*4;
            }
            if ($L == 0)
            {
                $L = 4;
            }
        }
        else
        {
            string $dup[] = `duplicate -rc $ctrls_chains[0]`;
            string $d[] = `listRelatives -c -f $dup[0]`;
            string $d1;
            for ($d1 in $d)
            {
                if(`nodeType $d1` != "nurbsCurve")
                {
                    select $d1;
                    doDelete;
                }
            }//删除所有子级
            channelBoxCommand CBunlockAttr;
            CBunlockAttr ($dup[0]+".translateX"); CBunlockAttr ($dup[0]+".translateY"); CBunlockAttr ($dup[0]+".translateZ");
            CBunlockAttr ($dup[0]+".rotateX"); CBunlockAttr ($dup[0]+".rotateY"); CBunlockAttr ($dup[0]+".rotateZ");
            string $loc[] = `spaceLocator`;
            string $con[] = `parentConstraint -weight 1 $dup[0] $loc[0]`;
            delete $con;
            string $con1[] = `parentConstraint -weight 1 $loc[0] $dup[0]`;
            setAttr ($loc[0]+".rotate") 0 0 0;
            float $Box[] = `xform -q -bb $dup[0]`;//得到边界框数值
            delete $con1;
            delete $dup[0];
            delete $loc;
            float $len = `mag(<<$Box[3],$Box[4],$Box[5]>> - <<$Box[0],$Box[1],$Box[2]>>)`;
             $L = sqrt($len*$len/3)*4;
           // $L = 4;
        }
        for ($i in $ctrls_chains)//create proxy joint in ctrl world position
        {
           vector $ctrl_position = `xform -q -ws -rp $i`;
           //print $ctrl_position;

           $proxyJoint[$c] = `joint -name ($i + "_kSpringProxySuffix")  -p ($ctrl_position.x) ($ctrl_position.y) ($ctrl_position.z) -radius ($L/4) -roo xyz`;
           $c++;
        }
    
        string $a;
        for ($a in $proxyJoint)
        {
            // set joint orientation
            joint -edit -orientJoint "xyz" -zeroScaleOrient $a;

            // Straight bones alignment
            setAttr ($a+".rx") 0; setAttr ($a+".ry") 0; setAttr ($a+".rz") 0;
            setAttr ($a+".rotateAxis") 0 0 0;
            setAttr ($a+".jointOrient") 0 0 0;
        }

           // parent root proxy joint to control parent
           string $hi[] = `listRelatives -p -f $ctrls_chains[0]`;
           if(`size $hi` > 0)
           {
               parent $proxyJoint[0] $hi[0];
           }

            // Necessary to start a new joint chain
            select -clear;
        
            int $idx;
            for ($a in $proxyJoint)
            {
                // orient joint chain
                if($idx < (`size $proxyJoint`-1))
                {
                    string $cns[] = `aimConstraint -aimVector 1 0 0 -upVector 0 0 0 -worldUpVector 0 1 0 -skip "x" $ctrls_chains[$idx+1] $proxyJoint[$idx]`;       
                    delete $cns;
                    //parentConstraint -maintainOffset $proxyJoint[$idx] $ctrls_chains[$idx];
                    $idx++;
                }
                else
                {
                    if ($idx == 0)
                    {
                        string $con[] = `parentConstraint $ctrls_chains[$idx] $a`;
                        delete $con;
                    }
                }
            }
            int $idx1;
            for ($a in $proxyJoint)
            {
                parentConstraint -maintainOffset $proxyJoint[$idx1] $ctrls_chains[$idx1];
                $idx1++;
            }
        }
        //select $proxyJoint;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////选择父级控制器///////////////////////////////////starting.........
global proc curv()
{
    string $s[] = `ls -sl`;
    if(`size $s` > 0)
    {
        string $t0[] = `listRelatives -c -f $s[0]`;
        string $i;
        string $p[];
        int $b = 0;
        for ($i in $t0)
        {
            if(`nodeType $i` == "nurbsCurve")
            {
                $p[0] = $s[0];
                select $p[0];
                $b = 1;
                break;
            }
        }
        if ($b == 0)
        {
            select -d;
        }
    }
}
//////////////////////
global proc selectP()
 {
     string $s[] = `ls -sl`;
     string $t0[] = `listRelatives -ap -f $s[0]`;
     select $t0;
     curv;
     string $s2[] = `ls -sl`;
     if(`size $s2` == 0)
     {
         if($t0[0] != "")
         {
             select $t0[0];
             selectP;
         }
     }
     else
     {
         select $s2;
     }
   
}
///////////////////////////////////选择父级控制器///////////////////////////////////Ending.................
//多层级判断
global proc mul_Hi_judge(string $judge)
{
        select $judge;
        selectHi;
        string $Hi[] = `ls -sl`;
        string $i;
        string $Hi_P[];
        int $c;
        for ($i in $Hi)
        {
            string $t[] = `listRelatives -ap -f $i`;
            if(`size $t` == 0)
            {
                $t[0] = "no father";
            }
            else
            {
                select $i;
                selectP;
                string $sel[] = `ls -sl`; 
                $Hi_P[$c] = $sel[0];
                $c++;
            }
        }
        string $Same[];
        int $c1;
        int $c2;
        int $c3;
        int $c4[];
        int $c0;
        for($c0=0; $c0 < `size $Hi_P`; $c0++)
        {
            for($c2=$c1;$c2 < (`size $Hi`-1);$c2++)
            {
                if($Hi_P[$c0] == $Hi_P[$c2+1])//逐个对比父对象
                {
                    $Same[$c3] = $Hi[$c2+1];
                    $c4[$c3] = ($c2+1);
                    $c3++;
                }
            }
            $c1++;
         /*   int $i0;
            for($i0 in $c4)
            {
                if($c0 == $i0)
                {
                    $c0++;
                    $c1++;
                }
            }*/
        }
        //print $c4;
       // print $Same;//获得有共同父对象的控制器
        select $Same;
}
/////////////////////////////////////////////////////////////////////////////////////////////

//多层级解决
global proc mul_Hi_solve(string $solve,string $Same[])
{
             select $solve;
             selectHi;
             string $X_A[] = `ls -sl`;
             select $Same;  selectHi;
             string $X_d[] = `ls -sl`;
             select $X_A;  select -d $X_d;
             string $X_link[] = `ls -sl`;//主链
             
            if(`menuItem -q -checkBox EndCheckBox` == 1)
           {
              int $a = `size $X_link`;
              string $objectName = $X_link[$a-1];
              if (`match "curves_moduan" $objectName` != "curves_moduan")
              {
                  dupEnd;
                  string $X_moduan[] = `ls -sl`;
                  $X_link[`size $X_link`] = $X_moduan[0];
              }
           }
           select $X_link;
           bindControls($X_link,0);//绑定主链
           
           string $Same_ch;
           for ($Same_ch in $Same)
           {
                select $Same_ch;
                if(`menuItem -q -checkBox EndCheckBox` == 1)
               {
                   createEnd(0);
               }
            select $Same_ch;
            selectHi;
            string $X_link_same[] = `ls -sl`;
            bindControls($X_link_same,0);//绑定支链
            
            //string $p[] = `listRelatives -p $Same_ch`;
            //parent ($Same_ch+"_kSpringProxySuffix") $p[0];
           }
}
//////////////////////////////////////////////////////////////////////////////////////

global proc DG(string $x)
{
    mul_Hi_judge($x);//判断多层级
    string $Same[] = `ls -sl`;
    if(`size $Same` > 0)
    {
        string $Same_in;
        for($Same_in in $Same)
        {
           DG($Same_in);     
        }
      mul_Hi_solve($x,$Same);//解决多层级  
    }
}   

global proc bindControlsAll()
{
     string $sel[] = `ls -sl`;
     if(`menuItem -q -checkBox AutoBindCheckBox` == 1)
     {
        if(`menuItem -q -checkBox EndCheckBox` == 1)
        {
            createEnd(0);
            select $sel;
        }

        string $all_ctrls_descendants_list[] = `listRelatives -ad $sel`;
        string $x;
        for($x in $sel)
        {
            int $a;
            for($a=0;$a < `size $all_ctrls_descendants_list`; $a++)
            {
                if($all_ctrls_descendants_list[$a] == $x)
                {
                    select -d $x;
                } 
            }
     
        }
        string $sel2[] = `ls -sl`;
        for($x in $sel2)
        {
            mul_Hi_judge($x);//判断多层级
            string $Same[] = `ls -sl`;
            if(`size $Same` > 0)
            {
                DG($x);     
            }
        
            else 
            {
                select $x;
                selectHi;
                string $X_link[] = `ls -sl`;
                bindControls($X_link,1);
            }
        }
    }
    else
    {
        
        bindControls($sel,1);
    }
    
}   
//bindControlsAll; 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

global proc clearBind()
{
    string $T[] = `ls -sl`;
    string $proxyJointLst[];
    string $proxyJointLst00[];
    if(`size $T` > 0)
    {
        string $i;
        int $count;
        for($i in $T)
        {
            if(`nodeType $i` == "joint")
            {
                 if (`match "_kSpringProxySuffix" $i` == "_kSpringProxySuffix")
                {
                    $proxyJointLst00[$count] = $i;
                    $count++;
                }
            }
        }
        select $proxyJointLst00;
        select -hi;
        $proxyJointLst = `ls -sl`;
    }

    else
    {
        M("_kSpringProxySuffix");
        $proxyJointLst = `ls -sl`;
        //print $proxyJointLst;
    }
    
    if(`size $proxyJointLst` == 0)
    { 
        warning("请 选 择 代 理 骨 骼" + "\n");
    }
    else
    {
        select -d;
        string $ctrlList[];
        string $bone;
        int $c;
        int $startFrame = `playbackOptions -q -min`;
        int $endFrame = `playbackOptions -q -max`;
        for ($bone in $proxyJointLst)
        {
            clear_houzhui($bone);
            string $temp[] = `ls -sl`;
            $ctrlList[$c] = $temp[0];
            $c++;
        }
        bakeResults -t ($startFrame+":"+$endFrame) $ctrlList;

        delete $proxyJointLst;
        if(`size $T` == 0)
        {
            CleanUpEnd;
        }
    }

}
//clearBind;
//////////////////////////////////////////////END//////////////////////////////////////////////////////////



// Graph Filter by Maxim Ouellet

global int $toggleCounter[];
global string $toggleButton[];

global proc curveSelection (string $chosenAxis, int $toggleCheck)
{
    global int $toggleCounter[];
    global string $toggleButton[];
    
    if( $toggleCounter[$toggleCheck] == 0 )
    {
        filterUISelectAttributesCheckbox $chosenAxis 1 graphEditor1OutlineEd;
        $toggleCounter[$toggleCheck] = 1;
        button -edit -bgc 1 1 1 $toggleButton[$toggleCheck];
        
        
    }
    else
    {
        filterUISelectAttributesCheckbox $chosenAxis 0 graphEditor1OutlineEd;
        $toggleCounter[$toggleCheck] = 0;
        if($toggleCheck == 0 || $toggleCheck == 3 || $toggleCheck == 6) {button -edit -bgc 0.6 0 0 $toggleButton[$toggleCheck];}
        if($toggleCheck == 1 || $toggleCheck == 4 || $toggleCheck == 7) {button -edit -bgc 0 0.6 0 $toggleButton[$toggleCheck];}
        if($toggleCheck == 2 || $toggleCheck == 5 || $toggleCheck == 8) {button -edit -bgc 0 0.254902 0.6 $toggleButton[$toggleCheck];}
       
    }
}

global proc clearFilters ()
{
    global int $toggleCounter[];
    global string $toggleButton[];
    filterUISelectAttributesCheckbox translateX 0 graphEditor1OutlineEd;
    filterUISelectAttributesCheckbox translateY 0 graphEditor1OutlineEd;
    filterUISelectAttributesCheckbox translateZ 0 graphEditor1OutlineEd;
    filterUISelectAttributesCheckbox rotateX 0 graphEditor1OutlineEd;
    filterUISelectAttributesCheckbox rotateY 0 graphEditor1OutlineEd;
    filterUISelectAttributesCheckbox rotateZ 0 graphEditor1OutlineEd;
    filterUISelectAttributesCheckbox scaleX 0 graphEditor1OutlineEd;
    filterUISelectAttributesCheckbox scaleY 0 graphEditor1OutlineEd;
    filterUISelectAttributesCheckbox scaleZ 0 graphEditor1OutlineEd;
    clear $toggleCounter;
    button -edit -bgc 0.6 0 0 $toggleButton[0];
    button -edit -bgc 0 0.6 0 $toggleButton[1];
    button -edit -bgc 0 0.254902 0.6 $toggleButton[2];
    button -edit -bgc 0.6 0 0 $toggleButton[3];
    button -edit -bgc 0 0.6 0 $toggleButton[4];
    button -edit -bgc 0 0.254902 0.6 $toggleButton[5];
    button -edit -bgc 0.6 0 0 $toggleButton[6];
    button -edit -bgc 0 0.6 0 $toggleButton[7];
    button -edit -bgc 0 0.254902 0.6 $toggleButton[8];
    
}
///////////////////////////////////////////////////////////////////////////
animationToolUI
